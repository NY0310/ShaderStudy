#pragma kernel CSMain

struct BoidState
{
    float3 position;
    float3 forward;
};

RWStructuredBuffer<BoidState> boidBuffer;

uint numBoids;
float deltaTime;
half separationWeight;
half alignmentWeight;
half targetWeight;
half moveSpeed;
float3 targetPosition;

float3 normalizeSafe(float3 v)
{
    return length(v) > 0 ? normalize(v) : 0;
}

[numthreads(8,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    BoidState boidSelf = boidBuffer[id.x];
    float3 cellAlignment, cellSeparation;

    for (uint i = 0; i < numBoids; ++i)
    {
        cellAlignment += boidBuffer[i].forward;
        cellSeparation += boidBuffer[i].position;
    }

    const float3 alignmentResult = alignmentWeight * normalizeSafe((cellAlignment / numBoids) - boidSelf.forward);

    const float3 separationResult = separationWeight * normalizeSafe((boidSelf.position / numBoids) - cellSeparation);

    const float3 targetHeading = targetWeight
        * normalizeSafe(targetPosition - boidSelf.position);

    const float3 normalHeading = normalizeSafe(alignmentResult + separationResult + targetHeading);

    const float3 nextHeading = normalizeSafe(boidSelf.forward + deltaTime * (normalHeading - boidSelf.forward));

    boidSelf.position = boidSelf.position + (nextHeading * moveSpeed * deltaTime);
    boidSelf.forward = nextHeading;
    boidBuffer[boidIndex] = boidSelf;
}
